{
    // General Settings
    "retry" : 10,        // http retry delay in seconds
    "daemon": true,
    "verbosity" : {verbosity},     // (0=log_alert, 1=log_error, 3=log_warning, 5=log_info, 10=log_debug, 15=log_finest)
    "log" : "/vzlogger.log",
 
    // Build-in HTTP server
    "local" : {
         "enabled" : false,   // enable local HTTPd for serving live readings
         "port" : 8081,
         "index" : true,      // provide index listing of available channels if no UUID was requested
         "timeout" : 30,
         "buffer" : 600
    },

    // mqtt client support (if ENABLE_MQTT set at cmake generation)
    "mqtt": {
        "enabled": true,  // enable mqtt client. needs host and port as well
        "host": "{mqtt_broker}", // mqtt server addr
        "port": {mqtt_port}, // 1883 for unencrypted, 8883 enc, 8884 enc cert needed,
        "cafile": "", // optional file with server CA
        "capath": "", // optional path for server CAs. see mosquitto.conf. Specify only cafile or capath
        "certfile": "", // optional file for your client certificate (e.g. client.crt)
        "keyfile": "", // optional path for your client certficate private key (e.g. client.key)
        "keypass": "", // optional password for your private key
        "keepalive": 30, // optional keepalive in seconds.
        "topic": "{mqtt_topic}", // optional topic dont use $ at start and no / at end
        "user": "{mqtt_username}", // optional user name for the mqtt server
        "pass": "{mqtt_password}", // optional password for the mqtt server
        "retain": false, // optional use retain message flag
        "rawAndAgg": false, // optional publish raw values even if agg mode is used
        "qos": 0, // optional quality of service, default is 0
        "timestamp": {mqtt_timestamp} // optional whether to include a timestamp in the payload
    },

    // information on the (up to two) meters and their channels
    "meters" : [{
        "protocol" : "{meter1_protocol}",
        "enabled" : true,
        "device" : "{meter1_device}",
        "parity" : "{meter1_parity}",
        "baudrate" : {meter1_baudrate},
        "aggtime" : {meter1_aggtime},    // aggregate meter readings for <aggtime> seconds
        "interval" : {meter1_interval},
        "aggfixedinterval" : true, // round timestamps to nearest <aggtime> before sending
        "duplicates" : 60,
        "channels": [{meter1_channels}]
        },{
        "protocol" : "{meter2_protocol}",
        "enabled" : {meter2_enabled},
        "device" : "{meter2_device}",
        "parity" : "{meter2_parity}",
        "baudrate" : {meter2_baudrate},
        "aggtime" : {meter2_aggtime},
        "interval" : {meter2_interval},
        "aggfixedinterval" : true,
        "duplicates" : 60,
        "channels": [{meter2_channels}]
    }]
}
